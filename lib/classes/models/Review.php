<?php

/**
 * Ukz375199ontdgReviews
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Review extends BaseReview
{
	private $langs = array( 'it' => 'italian', 'en' => 'english' );
	
	public function getData(){
		$data = parent::getData();
		parse_str($this->text,$out);
		foreach($out as $key => $value){
			$out[$key] = urldecode($value);
		}
		$langs = array_flip($this->langs);
		$lang = $langs[$data['rlanguage']];
		
		$yaml = new sfYamlParser();
		$root = Config::getRoot();
		$arrays = $yaml->parse(file_get_contents($root.'data/model/review/values.yml'));
		foreach($arrays as $key => $value) $$key = $value;
		
		$out['genere'] = $generi[$out['genere']][$lang]; 
		$out['ambientazione'] = $ambientazioni[$out['ambientazione']][$lang]; 
		$out['difficolta'] = $gradidifficolta[$out['difficolta']][$lang]; 
		$out['collez'] = $collezionabilita[$out['collez']][$lang]; 
		$out['compl_espans'] = $espandibilita[$out['compl_espans']][$lang];
		$out['meccaniche'] = array(
			$meccaniche[$out['meccaniche1']][$lang],
			$meccaniche[$out['meccaniche2']][$lang],
			$meccaniche[$out['meccaniche3']][$lang]
		);
		foreach($out['meccaniche'] as $i => $meccanica)
			if (!$meccanica) unset($out['meccaniche'][$i]);
		unset($out['meccaniche1'],$out['meccaniche2'],$out['meccaniche3']);

		$out['tipo'] = array(
			$tipi[$out['tipo1']][''],
			$tipi[$out['tipo2']][$lang],
			$tipi[$out['tipo3']][$lang],
			$tipi[$out['tipo4']][$lang]
		);
		foreach($out['tipo'] as $i => $tipo)
			if (!$tipo) unset($out['tipo'][$i]);
		unset($out['tipo1'],$out['tipo2'],$out['tipo3'],$out['tipo4']); 
		
		$out['cover_path'] = Config::get('coverBasePath','reviews').$data['id'].'/';
		unset($data['text']);
		$data = $data + $out;
		foreach($data as $key => $value) {
			if (!is_array($value)) {
				$data[$key] = $this->toUTF8($value);
				continue;
			}
			foreach	($value as $i => $v) $data[$key][$i] = $this->toUTF8($v);
		}
		
		return $data; 
	}
	
	
	
	private function toUTF8($str){
		$str = strtr($str, array( "\\\"" => '"', "\\'" => '\'', "’" => '\'', '“' => '"', '”' => '"'));
		return mb_convert_encoding($str, 'UTF-8',
			mb_detect_encoding($str, 'UTF-8, ISO-8859-1', true)
		);
	}
}